amqp_url = "amqp://fedoramessages:fedoramessages@tinystage.tinystage.test"
callback = "fedbadges.consumer:FedoraBadgesConsumer"
passive_declares = false
publish_exchange = "amq.topic"
topic_prefix = ""

[tls]
ca_cert = "/etc/fedora-messaging/cacert.pem"
keyfile = "/etc/fedora-messaging/fedora-key.pem"
certfile = "/etc/fedora-messaging/fedora-cert.pem"

[client_properties]
app = "fedbadges"

# If the exchange or queue name  has a "." in it, use quotes as seen here.
[exchanges."amq.topic"]
type = "topic"
durable = true
auto_delete = false
arguments = {}

[queues.fedbadges]
durable = true
auto_delete = false
exclusive = false
arguments = {}

[[bindings]]
queue = "fedbadges"
exchange = "amq.topic"
routing_keys = ["#"]


[consumer_config]
# This tells the consumer where to look for its BadgeRule definitions.  It
# may be a relative or an absolute path on the file system.
badges_directory = "tests/test_badges"

# Number of seconds to delay before consuming a message for our event loop.
# This is here to help us mitigate distributed race conditions between
# fedbadges and datanommer.
consume_delay = 1

# This is a sqlalchemy URI that points to the tahrir DB.  In
# production, this will be a postgres URI.
database_uri = "sqlite:////home/vagrant/badges.db"

# Datanommer database URI
datanommer_db_uri = "sqlite:////home/vagrant/datanommer.db"
datagrepper_url = "https://apps.fedoraproject.org/datagrepper"
distgit_hostname = "src.tinystage.test"
id_provider_hostname = "id.tinystage.test"
fasjson_base_url = "https://fasjson.tinystage.test/fasjson"


# This is a set of data that tells our consumer what Open Badges Issuer
# should be kept as the issuer of all the badges we create.
[consumer_config.badge_issuer]
issuer_entity_id = "dkcsldkmlkc92jn"
issuer_name = "Fedora Project"
issuer_origin = "http://badges.tinystage.test"
issuer_url = "http://fedoraproject.org"
issuer_email = "badges@fedoraproject.org"


[qos]
prefetch_size = 0
prefetch_count = 25

[log_config]
version = 1
disable_existing_loggers = true

[log_config.formatters.simple]
format = "[%(levelname)s %(name)s] %(message)s"

[log_config.handlers.console]
class = "logging.StreamHandler"
formatter = "simple"
stream = "ext://sys.stdout"

[log_config.loggers.fedbadges]
level = "INFO"
propagate = false
handlers = ["console"]

[log_config.loggers.fedora_messaging]
level = "INFO"
propagate = false
handlers = ["console"]

# Twisted is the asynchronous framework that manages the TCP/TLS connection, as well
# as the consumer event loop. When debugging you may want to lower this log level.
[log_config.loggers.twisted]
level = "INFO"
propagate = false
handlers = ["console"]

# Pika is the underlying AMQP client library. When debugging you may want to
# lower this log level.
[log_config.loggers.pika]
level = "WARNING"
propagate = false
handlers = ["console"]

[log_config.root]
level = "ERROR"
handlers = ["console"]
